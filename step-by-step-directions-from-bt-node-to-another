# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        
        # O(n) time O(n) space
        
        adj = defaultdict(list)
        q = collections.deque([root])
        
        while q:
            node = q.popleft()
            if node.left:
                adj[node.left.val].append((node.val, 'U'))
                adj[node.val].append((node.left.val, 'L'))
                q.append((node.left))
            if node.right:
                adj[node.right.val].append((node.val, 'U'))
                adj[node.val].append((node.right.val, 'R'))
                q.append((node.right))
                
        q.append((startValue, ""))
        visit = set()
        
        while q:
            currVal, currPath = q.popleft()
            visit.add(currVal)
            if currVal == destValue:
                return currPath
            for node, path in adj[currVal]:
                if node not in visit:
                    q.append((node, currPath+path))
                
                
        
