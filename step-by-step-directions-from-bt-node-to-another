# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        
        # O(n) time O(n) space
        # BFS
        
        q = collections.deque([root])
        nodesMap = defaultdict(list)
        
        while startValue not in nodesMap or destValue not in nodesMap:
            node = q.popleft()
            if node.left:
                nodesMap[node.val].append((node.left.val, 'L'))
                nodesMap[node.left.val].append((node.val, 'U'))
                q.append(node.left)
            if node.right:
                nodesMap[node.val].append((node.right.val, 'R'))
                nodesMap[node.right.val].append((node.val, 'U'))
                q.append(node.right)
                
        q = collections.deque([(startValue, '')])
        visit = set()
        print(nodesMap)
        
        while q:
            val, currPath = q.popleft()
            visit.add(val)
            if val == destValue:
                return currPath
            for neigh, path in nodesMap[val]:
                if neigh in visit:
                    continue
                q.append((neigh, currPath+path))
        
        
